// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';

import type { GetAllUsersError, GetAllUsersResponse, UpdateUserData, UpdateUserError, UpdateUserResponse, CreateUserData, CreateUserError, CreateUserResponse, GetProductCateData, GetProductCateError, GetProductCateResponse, UpdateProductCateData, UpdateProductCateError, UpdateProductCateResponse, DeleteProductCateData, DeleteProductCateError, DeleteProductCateResponse, GetAllProductsError, GetAllProductsResponse, UpdateProductData, UpdateProductError, UpdateProductResponse, CreateProductData, CreateProductError, CreateProductResponse, GetAllAddressesError, GetAllAddressesResponse, UpdateAddressData, UpdateAddressError, UpdateAddressResponse, CreateAddressData, CreateAddressError, CreateAddressResponse, GetAllActivitiesError, GetAllActivitiesResponse, UpdateActivityData, UpdateActivityError, UpdateActivityResponse, CreateActivityData, CreateActivityError, CreateActivityResponse, GetAllProductCatesError, GetAllProductCatesResponse, CreateProductCateData, CreateProductCateError, CreateProductCateResponse, GetAllProductOptionsError, GetAllProductOptionsResponse, CreateProductOptionData, CreateProductOptionError, CreateProductOptionResponse, GetAllProcessorMapsError, GetAllProcessorMapsResponse, CreateProcessorMapData, CreateProcessorMapError, CreateProcessorMapResponse, GetAllOrdersError, GetAllOrdersResponse, CreateOrderData, CreateOrderError, CreateOrderResponse, LoginData, LoginError, LoginResponse, GetUserByNameData, GetUserByNameError, GetUserByNameResponse, GetAddressByNameData, GetAddressByNameError, GetAddressByNameResponse } from './types.gen';


const API_BASE_URL = 'http://localhost:80';
export const client = createClient(createConfig({baseUrl: API_BASE_URL}));


client.interceptors.request.use((request) => {
    const token = localStorage.getItem('token')
    if(token !== null){
        request.headers.set('Authorization', token);
    }
    return request;
});

client.interceptors.response.use((response) => {
    const token = response.headers.get('Authorization')
    if(token !== null){
        localStorage.setItem('token',token)
    }
    return response;
});

export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllUsersResponse, GetAllUsersError, ThrowOnError>({
    ...options,
    url: '/user'
}); };

export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
    ...options,
    url: '/user'
}); };

export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => { return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
    ...options,
    url: '/user'
}); };

export const getProductCate = <ThrowOnError extends boolean = false>(options: Options<GetProductCateData, ThrowOnError>) => { return (options?.client ?? client).get<GetProductCateResponse, GetProductCateError, ThrowOnError>({
    ...options,
    url: '/product_cates/{id}'
}); };

export const updateProductCate = <ThrowOnError extends boolean = false>(options: Options<UpdateProductCateData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateProductCateResponse, UpdateProductCateError, ThrowOnError>({
    ...options,
    url: '/product_cates/{id}'
}); };

export const deleteProductCate = <ThrowOnError extends boolean = false>(options: Options<DeleteProductCateData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteProductCateResponse, DeleteProductCateError, ThrowOnError>({
    ...options,
    url: '/product_cates/{id}'
}); };

export const getAllProducts = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllProductsResponse, GetAllProductsError, ThrowOnError>({
    ...options,
    url: '/product'
}); };

export const updateProduct = <ThrowOnError extends boolean = false>(options: Options<UpdateProductData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateProductResponse, UpdateProductError, ThrowOnError>({
    ...options,
    url: '/product'
}); };

export const createProduct = <ThrowOnError extends boolean = false>(options?: Options<CreateProductData, ThrowOnError>) => { return (options?.client ?? client).post<CreateProductResponse, CreateProductError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null
    },
    url: '/product'
}); };

export const getAllAddresses = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllAddressesResponse, GetAllAddressesError, ThrowOnError>({
    ...options,
    url: '/address'
}); };

export const updateAddress = <ThrowOnError extends boolean = false>(options: Options<UpdateAddressData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateAddressResponse, UpdateAddressError, ThrowOnError>({
    ...options,
    url: '/address'
}); };

export const createAddress = <ThrowOnError extends boolean = false>(options: Options<CreateAddressData, ThrowOnError>) => { return (options?.client ?? client).post<CreateAddressResponse, CreateAddressError, ThrowOnError>({
    ...options,
    url: '/address'
}); };

export const getAllActivities = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllActivitiesResponse, GetAllActivitiesError, ThrowOnError>({
    ...options,
    url: '/activity'
}); };

export const updateActivity = <ThrowOnError extends boolean = false>(options: Options<UpdateActivityData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateActivityResponse, UpdateActivityError, ThrowOnError>({
    ...options,
    url: '/activity'
}); };

export const createActivity = <ThrowOnError extends boolean = false>(options?: Options<CreateActivityData, ThrowOnError>) => { return (options?.client ?? client).post<CreateActivityResponse, CreateActivityError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null
    },
    url: '/activity'
}); };

export const getAllProductCates = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllProductCatesResponse, GetAllProductCatesError, ThrowOnError>({
    ...options,
    url: '/product_cates'
}); };

export const createProductCate = <ThrowOnError extends boolean = false>(options: Options<CreateProductCateData, ThrowOnError>) => { return (options?.client ?? client).post<CreateProductCateResponse, CreateProductCateError, ThrowOnError>({
    ...options,
    url: '/product_cates'
}); };

export const getAllProductOptions = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllProductOptionsResponse, GetAllProductOptionsError, ThrowOnError>({
    ...options,
    url: '/productOption'
}); };

export const createProductOption = <ThrowOnError extends boolean = false>(options: Options<CreateProductOptionData, ThrowOnError>) => { return (options?.client ?? client).post<CreateProductOptionResponse, CreateProductOptionError, ThrowOnError>({
    ...options,
    url: '/productOption'
}); };

export const getAllProcessorMaps = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllProcessorMapsResponse, GetAllProcessorMapsError, ThrowOnError>({
    ...options,
    url: '/processorMap'
}); };

export const createProcessorMap = <ThrowOnError extends boolean = false>(options: Options<CreateProcessorMapData, ThrowOnError>) => { return (options?.client ?? client).post<CreateProcessorMapResponse, CreateProcessorMapError, ThrowOnError>({
    ...options,
    url: '/processorMap'
}); };

export const getAllOrders = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllOrdersResponse, GetAllOrdersError, ThrowOnError>({
    ...options,
    url: '/order'
}); };

export const createOrder = <ThrowOnError extends boolean = false>(options: Options<CreateOrderData, ThrowOnError>) => { return (options?.client ?? client).post<CreateOrderResponse, CreateOrderError, ThrowOnError>({
    ...options,
    url: '/order'
}); };

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => { return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
    ...options,
    url: '/auth/login'
}); };

export const getUserByName = <ThrowOnError extends boolean = false>(options: Options<GetUserByNameData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserByNameResponse, GetUserByNameError, ThrowOnError>({
    ...options,
    url: '/user/{name}'
}); };

export const getAddressByName = <ThrowOnError extends boolean = false>(options: Options<GetAddressByNameData, ThrowOnError>) => { return (options?.client ?? client).get<GetAddressByNameResponse, GetAddressByNameError, ThrowOnError>({
    ...options,
    url: '/address/{school}'
}); };