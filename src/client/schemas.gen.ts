// This file is auto-generated by @hey-api/openapi-ts

export const ObjectIdSchema = {
    type: 'string'
} as const;

export const CouponInsSchema = {
    required: ['uuid'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string'
        },
        couponId: {
            type: 'string',
            description: '对应Coupon.id'
        },
        name: {
            type: 'string',
            description: 'Coupon.name'
        },
        status: {
            type: 'integer',
            description: '0=未使用，1=已使用',
            format: 'int32'
        },
        cateId: {
            type: 'string',
            description: '适用商品类，对应ProductCate.id，为空时适用所有商品类'
        },
        dePrice: {
            type: 'integer',
            description: '抵扣金额，与对应Coupon.dePrice对应。单位为分',
            format: 'int32'
        },
        validity: {
            type: 'string',
            description: 'Coupon.validity',
            format: 'date-time'
        }
    },
    description: '用户持有的优惠券实例'
} as const;

export const PointsProductInsSchema = {
    required: ['uuid'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string'
        },
        userId: {
            type: 'string',
            description: '对应User.id'
        },
        pointsProductId: {
            type: 'string',
            description: '对应PointsProduct.id'
        },
        name: {
            type: 'string',
            description: 'PointsProduct.name'
        },
        sendType: {
            type: 'integer',
            description: '领取方式，0为自提，1为填信息邮递',
            format: 'int32'
        },
        number: {
            type: 'string',
            description: '号码'
        },
        sendAddr: {
            type: 'string',
            description: '邮递人地址'
        },
        getDate: {
            type: 'string',
            description: '自提时间',
            format: 'date-time'
        },
        received: {
            type: 'integer',
            description: '是否已领取，0为未领取，1为已领取',
            format: 'int32'
        }
    },
    description: '用户兑换过的积分商品列表'
} as const;

export const UserSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        openid: {
            type: 'string'
        },
        sessionKey: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        studentCert: {
            type: 'boolean',
            description: '学生认证后设为True'
        },
        school: {
            type: 'string',
            description: '学生认证结果'
        },
        expend: {
            type: 'number',
            description: '总消费金额',
            format: 'double'
        },
        orderNum: {
            type: 'integer',
            description: '下单次数',
            format: 'int32'
        },
        points: {
            type: 'integer',
            description: '持有积分',
            format: 'int32'
        },
        coupons: {
            type: 'array',
            description: '用户持有的优惠券实例',
            items: {
                '$ref': '#/components/schemas/CouponIns'
            }
        },
        pointsProducts: {
            type: 'array',
            description: '用户兑换过的积分商品列表',
            items: {
                '$ref': '#/components/schemas/PointsProductIns'
            }
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        hashedPassword: {
            type: 'string'
        },
        role: {
            type: 'string'
        },
        jwt: {
            type: 'string'
        }
    }
} as const;

export const ProductCateSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        title: {
            type: 'string'
        },
        status: {
            type: 'integer',
            description: 'status=0为下架，后端不返回给前端',
            format: 'int32'
        },
        priority: {
            type: 'integer',
            description: '优先级，便于设置显示顺序，已自动排序',
            format: 'int32'
        },
        delete: {
            type: 'integer',
            description: '对于delete=1的，后端不返回',
            format: 'int32'
        }
    }
} as const;

export const OptionValueSchema = {
    required: ['uuid'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string'
        },
        value: {
            type: 'string',
            description: '加购商品的可选项的可选值，如对于"规格"，value可以为"中杯"'
        },
        priceAdjustment: {
            type: 'integer',
            description: '该可选项的价格调整，>=0。单位也为分。',
            format: 'int32'
        }
    },
    description: '加购商品的可选项, key=ProductOption.id'
} as const;

export const ProductSchema = {
    required: ['cateId'],
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        cateId: {
            '$ref': '#/components/schemas/ObjectId'
        },
        name: {
            type: 'string'
        },
        imgURL: {
            type: 'string'
        },
        price: {
            type: 'integer',
            description: '基础价格，单位为分',
            format: 'int32'
        },
        stuPrice: {
            type: 'integer',
            description: '学生优惠价。若用户为已认证学生，展示基础价格，然后划掉，再展示学生优惠价。若未认证则正常展示基础价格。单位为分。',
            format: 'int32'
        },
        describe: {
            type: 'string',
            description: '详情页描述'
        },
        short_desc: {
            type: 'string',
            description: '菜单列表中，name下面展示的简介'
        },
        status: {
            type: 'integer',
            description: 'status=0为下架，后端不返回给前端',
            format: 'int32'
        },
        delete: {
            type: 'integer',
            description: '对于delete=1的，后端不返回',
            format: 'int32'
        },
        productOptions: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                description: '加购商品的可选项, key=ProductOption.id',
                items: {
                    '$ref': '#/components/schemas/OptionValue'
                }
            },
            description: '加购商品的可选项, key=ProductOption.id'
        }
    }
} as const;

export const ProductOptionSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        name: {
            type: 'string',
            description: '商品的可选项名称，如"规格"'
        },
        values: {
            type: 'array',
            description: '对于一个可选项，所有的可能选值，商铺管理用',
            items: {
                '$ref': '#/components/schemas/OptionValue'
            }
        }
    }
} as const;

export const PointsProductSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        name: {
            type: 'string'
        },
        imgURL: {
            type: 'string'
        },
        costPoints: {
            type: 'integer',
            description: '所需积分',
            format: 'int32'
        },
        describe: {
            type: 'string',
            description: '描述'
        },
        status: {
            type: 'integer',
            description: 'status=0为下架，后端不返回给前端',
            format: 'int32'
        },
        delete: {
            type: 'integer',
            description: '对于delete=1的，后端不返回',
            format: 'int32'
        },
        redeemedNum: {
            type: 'integer',
            description: '已兑换数量',
            format: 'int32'
        }
    }
} as const;

export const FixDeliveryInfoSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        school: {
            type: 'string',
            description: '对应User学生认证后的学校'
        },
        times: {
            type: 'array',
            description: '可选时间',
            items: {
                type: 'string',
                description: '可选时间'
            }
        },
        addresses: {
            type: 'array',
            description: '可选地址',
            items: {
                type: 'string',
                description: '可选地址'
            }
        }
    }
} as const;

export const CouponSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        cateId: {
            type: 'string',
            description: '适用商品类，对应ProductCate.id，为空时适用所有商品类'
        },
        name: {
            type: 'string',
            description: '名称'
        },
        type: {
            type: 'string',
            description: '类型，可选："新客"，"兑换"，"活动"，"临时"'
        },
        dePrice: {
            type: 'integer',
            description: '抵扣金额。单位为分。',
            format: 'int32'
        },
        status: {
            type: 'integer',
            description: '0：下线，1：上线。对于status=0的，不再允许发放、兑换',
            format: 'int32'
        },
        convertible: {
            type: 'boolean',
            description: '是否可用积分兑换'
        },
        costPoints: {
            type: 'integer',
            description: '消耗积分',
            format: 'int32'
        },
        validity: {
            type: 'string',
            description: '截至有效期',
            format: 'date-time'
        },
        issueNum: {
            type: 'integer',
            description: '发放数量',
            format: 'int32'
        },
        useNum: {
            type: 'integer',
            description: '使用数量',
            format: 'int32'
        },
        delete: {
            type: 'integer',
            description: '伪删除，为1时后端不返回',
            format: 'int32'
        }
    }
} as const;

export const AppConfigurationSchema = {
    required: ['id', 'key', 'value'],
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        key: {
            type: 'string',
            description: '配置项的键名，例如 "api.url"'
        },
        value: {
            type: 'string',
            description: '配置项的值，例如 "https://api.example.com"'
        },
        description: {
            type: 'string',
            description: '配置项的描述'
        },
        category: {
            type: 'string',
            description: '配置类别（用于分组管理）'
        }
    },
    description: '配置document，给一些变化频繁的配置用'
} as const;

export const ActivitySchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        title: {
            type: 'string',
            description: '活动名'
        },
        imgURL: {
            type: 'string',
            description: '活动图片URL'
        },
        describe: {
            type: 'string',
            description: '活动介绍'
        },
        startTime: {
            type: 'string',
            description: '活动开始时间',
            format: 'date-time'
        },
        endTime: {
            type: 'string',
            description: '活动结束时间，到时自动下架',
            format: 'date-time'
        },
        dePrice: {
            type: 'integer',
            description: '活动优惠抵扣价格，对于cateIds对应类的所有商品，减去这个价格。单位为分。',
            format: 'int32'
        },
        cateIds: {
            type: 'array',
            description: '适用商品类，对应ProductCate.id，当用户点击活动时，跳转到cateIds[0]对应的侧边栏',
            items: {
                type: 'string',
                description: '适用商品类，对应ProductCate.id，当用户点击活动时，跳转到cateIds[0]对应的侧边栏'
            }
        },
        status: {
            type: 'integer',
            description: '0为下架，1为上架。=0时不返回给小程序',
            format: 'int32'
        },
        delete: {
            type: 'integer',
            description: '伪删除，=1时后端不返回',
            format: 'int32'
        }
    }
} as const;

export const ProcessorMapSchema = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        state: {
            type: 'string'
        },
        event: {
            type: 'string'
        },
        customerTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        scenes: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        processorIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            }
        }
    }
} as const;

export const DeliveryInfoSchema = {
    type: 'object',
    properties: {
        school: {
            type: 'string'
        },
        address: {
            type: 'string',
            description: '绑定到具体订单实例的已选地址'
        },
        time: {
            type: 'string',
            description: '绑定到具体订单实例的已选时间',
            format: 'date-time'
        }
    },
    description: '定时达配送信息'
} as const;

export const OrderApiParamsSchema = {
    required: ['customerType', 'items', 'scene', 'userId'],
    type: 'object',
    properties: {
        userId: {
            '$ref': '#/components/schemas/ObjectId'
        },
        customerType: {
            type: 'string',
            description: '顾客类型，可选："北大学生业务"，"清华学生业务"，"未认证为学生身份的用户业务"'
        },
        scene: {
            type: 'string',
            description: '场景，可选："堂食"，"外带"，"定时达"'
        },
        deliveryInfo: {
            '$ref': '#/components/schemas/DeliveryInfo'
        },
        items: {
            type: 'array',
            description: '订单所含商品列表',
            example: '[example1,example2...]',
            items: {
                '$ref': '#/components/schemas/OrderItemApiParams'
            }
        },
        remark: {
            type: 'string',
            description: '顾客备注'
        },
        merchantNote: {
            type: 'string',
            description: '商家备注'
        },
        disPrice: {
            type: 'integer',
            description: '只给商品端使用的，线下优惠，小程序端传了也不处理。',
            format: 'int32'
        },
        couponInsUUID: {
            type: 'string',
            description: '本订单使用的优惠券uuid，可为空'
        }
    }
} as const;

export const OrderItemApiParamsSchema = {
    required: ['productId'],
    type: 'object',
    properties: {
        productId: {
            '$ref': '#/components/schemas/ObjectId'
        },
        optionValues: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                description: '商品选项，key为ProductOption.id, value为OptionValue.uuid'
            },
            description: '商品选项，key为ProductOption.id, value为OptionValue.uuid'
        }
    },
    description: '订单其中的一个商品'
} as const;

export const PrePaidDTOSchema = {
    type: 'object',
    properties: {
        prepay_id: {
            type: 'string'
        }
    }
} as const;

export const OrderSchema = {
    required: ['customerType', 'items', 'scene', 'totalPrice', 'userId'],
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/ObjectId'
        },
        userId: {
            '$ref': '#/components/schemas/ObjectId'
        },
        state: {
            type: 'string',
            description: '自动填充状态'
        },
        customerType: {
            type: 'string',
            description: '顾客类型，可选："北大学生业务"，"清华学生业务"，"未认证为学生身份的用户业务"'
        },
        scene: {
            type: 'string',
            description: '场景，可选："堂食"，"外带"，"定时达"'
        },
        deliveryInfo: {
            '$ref': '#/components/schemas/DeliveryInfo'
        },
        items: {
            type: 'array',
            description: '订单所含商品列表',
            example: '[example1,example2...]',
            items: {
                '$ref': '#/components/schemas/OrderItem'
            }
        },
        orderNum: {
            type: 'integer',
            description: '自动填充订单号',
            format: 'int32'
        },
        remark: {
            type: 'string',
            description: '顾客备注'
        },
        merchantNote: {
            type: 'string',
            description: '商家备注'
        },
        totalPrice: {
            type: 'integer',
            description: '后端根据sum(OrderItem.price)-coupon.dePrice计算，单位为分。',
            format: 'int32'
        },
        coupon: {
            '$ref': '#/components/schemas/CouponIns'
        },
        disPrice: {
            type: 'integer',
            description: '只给商品端使用的，线下优惠，小程序端传了也不处理。',
            format: 'int32'
        },
        createdAt: {
            type: 'string',
            description: '自动填充创建时间',
            format: 'date-time'
        }
    },
    description: '就是订单呀'
} as const;

export const OrderItemSchema = {
    type: 'object',
    properties: {
        productId: {
            '$ref': '#/components/schemas/ObjectId'
        },
        optionValues: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/OptionValue'
            },
            description: '商品选项，key为ProductOption.id, value为一个完整的OptionValue'
        },
        name: {
            type: 'string',
            description: 'Product.name'
        },
        cateId: {
            '$ref': '#/components/schemas/ObjectId'
        },
        price: {
            type: 'integer',
            description: '根据Product.price和目前optionValues中OptionValue.priceAdjustment计算的价格。单位为分',
            format: 'int32'
        },
        imgURL: {
            type: 'string',
            description: 'Product.imgURL'
        }
    },
    description: '订单其中的一个商品'
} as const;

export const ServiceResultObjectObjectSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object'
        },
        context: {
            type: 'object'
        },
        msg: {
            type: 'string'
        },
        success: {
            type: 'boolean'
        }
    }
} as const;

export const BatchSupplyOrderDTOSchema = {
    type: 'object',
    properties: {
        orderIds: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const CheckStudentIdentityApiParamsSchema = {
    type: 'object'
} as const;

export const WxStudentCheckDTOSchema = {
    type: 'object',
    properties: {
        errcode: {
            type: 'integer',
            format: 'int32'
        },
        errmsg: {
            type: 'string'
        },
        bind_status: {
            type: 'integer',
            format: 'int32'
        },
        is_student: {
            type: 'boolean'
        }
    }
} as const;

export const LoginDTOSchema = {
    required: ['password', 'username'],
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        password: {
            type: 'string'
        }
    }
} as const;

export const ResponseBodyDTOUserDTOSchema = {
    type: 'object',
    properties: {
        msg: {
            type: 'string'
        },
        data: {
            '$ref': '#/components/schemas/UserDTO'
        }
    }
} as const;

export const UserDTOSchema = {
    required: ['id'],
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        openid: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        studentCert: {
            type: 'boolean'
        },
        school: {
            type: 'string'
        },
        role: {
            type: 'string'
        },
        points: {
            type: 'integer',
            format: 'int32'
        },
        coupons: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CouponIns'
            }
        },
        pointsProducts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PointsProductIns'
            }
        }
    }
} as const;

export const AppConfigurationApiParamsSchema = {
    required: ['key', 'value'],
    type: 'object',
    properties: {
        key: {
            type: 'string',
            description: '配置项的键名，例如 "api.url"'
        },
        value: {
            type: 'string',
            description: '配置项的值，例如 "https://api.example.com"'
        },
        description: {
            type: 'string',
            description: '配置项的描述'
        },
        category: {
            type: 'string',
            description: '配置类别（用于分组管理）'
        }
    }
} as const;